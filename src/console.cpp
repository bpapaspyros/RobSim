/*! \mainpage Αρχική σελίδα Documentation
 *
 * \section intro_sec Εισαγωγή
 *
 * Το παρακάτω αποτελεί το documentation για την εργασία προγραμμτισμού του μαθήματος Οντοκεντρικός Προγραμματισμός II. Περιέχεται περιγραφή των κλάσεων και της ιεραρχίας καθώς και σύντομη περιγραφή των μεθόδων κάθε κλάσης.
 * 
 * \section decription_sec Περιγραφή υλοποίησης:
 * 
 * Το πρόγραμμα υλοποιήθηκε σε Linux με την βοήθεια των βιβλιοθηκών glut (OpenGL Utility Toolkit) και SOIL (Simple OpenGL Image Library). 
 * Αν και το πρόγραμμα υλοποιήθηκε και δοκιμάστηκε σε Linux η επιλογή των βιβλιοθηκών και η χρήση των συναρτήσεων που έχει γίνει είναι τέτοια ώστε να είναι συμβαδίζει με την έννοια του Cross-platform.
 * Η glut χρησιμοποιήθηκε για την υλοποιήση του 2D περιβάλλοντος της εφαμογής και παρείχει χρήσιμες μεθόδους για την απεικόνιση αντικειμένων και την διαχείριση αυτών και του παραθύρου.
 * Η SOIL χρησιμοποιήθηκε για την φώρτωση εικόνων στο πρόγραμμα, οποιασδήποτε μορφής και αν ειναι αυτές και επιλέχθηκε διότι είναι συμβατή με όλα τα βασικά λειτουργικά συστήματα.
 *
 * Ο πηγαίος κώδικας του προγράμματος χωρίζεται σε backend και frontend με την έννοια ότι ο μηχανισμός της προσομοίωσης είναι κοινό για οποιαδήποτε υλοποίηση της διεπαφής που βλέπει ο χρήστης.
 *
 * \section install_sec Εγκατάσταση
 * 
 * Ενώ είστε μέσα στο φάκελο του προγράμματος:
 *
 * \subsection step1 Βήμα 1: Εξαρτήσεις
 *
 * <CENTER> sudo apt-get install freeglut3-dev libxmu-dev libxi-dev libsoil-dev cmake </CENTER>
 * 
 * \subsection step2 Βήμα 2: Compiling
 * 
 * <CENTER> mkdir build && cd build && cmake .. && make && cd ../bin </CENTER>
 * 
 * \subsection step3 Βήμα 3: Running
 * 
 * Η διαδικασία compiling και linking θα παράγει 2 εκτελέσιμα (Robsim, RobsimGui) (με την παραδοχή ότι έχουν εγκατασταθεί σωστά οι παραπάνω εξαρτήσεις) ένα για το πρόγραμμα σε 
 * υλοποίηση κονσόλας και ένα για την υλοποίηση με γραφική διεπαφή. 
 * 
 * <CENTER> Κονσόλα: ./Robsim </CENTER>
 * <CENTER> GUI: ./RobsimGui </CENTER>
 * 
 * \section desc Περιγραφή προγράμματος
 *
 * \subsection sub0 Μηχανισμός προσομοίωσης:
 *
 * Ο μηχανισμός προσομοίωσης είναι υλοποιημένος ώστε να είναι ανεξάρτητος από την διεπαφή που θα βλέπει ο χρήστης. Το σύνολο του κώδικα στο backend περιέχει χρήσιμες κλάσεις όπως:
 * 
 * Abbreviations Class: Περιέχει συντομογραφίες πολύ κοινών συναρτήσεων που χρησιμοποιούνται πολύ συχνά στο πρόγραμμα.
 * 
 * Vehicle Class: Ορίζει σε ανώτερο επίπεδο ένα όχημα και τι μεταβλητές πρέπει να έχει.
 *
 * AnalysisRobot, ResearchRobot, RescueRobot Classes: Υποκλάσεις της Vehicle, ορίζουν πιο ειδικές λειτουργίες για κάθε είδος ρομπότ.
 *
 * Looper Class: Αναλαμβάνει τον εντοπισμό keyboard interrupts ώστε να μπορεί ο χρήστης να κάνει παύση του προγράμματος με το πάτημα ενός κουμπιού.
 * 
 * Map Class: Περιέχει τον ορισμό του χάρτη (Περιεκτικότητα σε στοιχεία, κίνδυνοι, σημαίες κινδύνου).
 *
 * Random Class: Συναρτήσεις παραγωγής τυχαίων αριθμών προσαμοσμένες σε επιθυμητό εύρος.
 *
 * Robot_management Class: Περιέχει το vector στο οποίο αποθηκεύονται τα ρομπότ και περιέχει μεθόδους για την προσθήκη/διαγραφή ρομπότ.
 *
 * SimulationStatus Class: Περιέχει τις συνθήκες τερματισμού του προγράμματος.
 *
 * SmartBase Class: Περιέχει την λογική με την οποία η βάση ζητά στοιχεία από τα ρομπότ ανάλυσης με βάση τα αποθέματα που έχει η βάση και τον ελεύθερο χώρο στο ρομπότ ανάλυσης.
 *
 *
 * \subsection sub1 Διεπαφή κονσόλας:
 *
 * Όταν το πρόγραμμα εκτελείται με διεπαφή κονσόλας τότε ο χρήστης θα δει αρχικά ένα κεντρικό μενού που θα του δώσει την επιλογή να ξεκινήσει μια προσομοίωση. Καθόλη την διάρκεια της προσωμοίοσης τυπώνονται στοιχεία για την λειτουργία του
 * τρέχοντος ρομπότ. Σε οποιαδήποτε στιγμή της προσομοίωσης ο χρήστης μπορεί να πατήσει "ENTER"
 * για να την παύσει, οπότε και θα εμφανιστε ένα μενού με επιλογές για την προσομοίωση και τον χάρτη που βλέπει ο χρήστης. Ο χρήστης μπορεί να διαλέξει ανάμεσα σε 3 χάρτες, ο πρώτος περιέχει μόνο τα ρομπότ και δείχνει αν υπάρχει σημαία 
 * σε κάποια θέση (plex view), ο δεύτερος (danger view) δείχνει την επικινδυνότητα κάθε θέσης στο χάρτη και που βρίσκονται τα ρομπότ και ο τρίτος (resources view) δείχνει το στοιχείο με την μεγαλύτερη περιεκτικότητα για κάθε θέση του χάρτη.
 * Όταν η προσομοίωση είναι σε παύση ο χρήστης μπορεί να γυρίσει στο κεντρικό μενού όπου του δίνεται επιλογή να επεξεργαστεί τις μεταβλητές του χάρτη και των ρομπότ και να συνεχίσει την προσομοίωση με τις νέες τιμές. Επίσης μπορεί να ξεκινήσει 
 * νέα προσομοίωση.
 *
 * Χρήσιμα σύμβολα:
 *
 * Α -> ρομπότ ανάλυσης 
 *
 * R -> ρομπότ διάσωσης 
 *
 * S -> ρομπότ εξευρεύνησης 
 *
 * \# -> σημαία κινδύνου
 *
 * \subsection sub2 Γραφική παραθυρική διεπαφή:
 *
 * Όταν το πρόγραμμα εκτελείται με γραφική παραθυρική διεπαφή τότε ο χρήστης θα δει αρχικά μια προσομοίωση σε παύση. ο χρήστης μπορεί να εμφανίσει μενού βοήθειας πατώντας "H" το οποίο θα τον ενημερώσει για του συνδυασμούς κουμπιών που μπορεί 
 * να χρησιμοποιήσει κατά την εκτέλεση του προγράμματος. Για την εισαγωγή δεδομένων (π.χ ρομπότ) και την επεξεργασία μεταβλητών λειτουργίας έχει δημιουργηθεί pop-up μενού που εμφανίζεται με δεξί κλικ του ποντικιού.
 * Καθόλη την διάρκεια της προσομοίωσης εμφανίζονται στοιχεία για την λειτουργία του κάθε ρομπότ στην αριστερή πλευρά του παραθύρου.
 *
 */

#include "frontend/Console/Console_graphics.h"
#include "backend/Map.h"

int main(int argc, char** argv) {
    Map m(0, 0);

    if (argc == 3){
        m = Map(*argv[1], *argv[2]);
    }else {
        m = Map(16, 16);
    }

    Console_graphics g = Console_graphics(m);
    g.print_toolbar();

    return 0;
}
